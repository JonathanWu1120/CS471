Jonathan Wu, Santos Acosta, Alexander Orellana, Bernie Wong
Assignment 8

1) Pg. 237 CYU 8, 9 and 11

1.8) Why is the distinction between mutable and immutable values important in
the implementation of a language with a reference model of variables?
It is important, because in the reference model of variables, because at first it might
seem that the reference model is more expensive than the value model. However, most
compilers use multiple copies of imutable objects. PLP232

1.9)Define orthogonality in the context of programming language design.
Orthogonality means that the feautures of a language can be used in any combination, andw these
combinations make sense and are consistant. PLP 233

1.11) What are the advantages of updating a variable with an assignment operator,
rather than with a regular assignment in which the variable appears on both
the left- and right-hand sides?
Advantages:
It is aesthetically cleaners to look at, especially when it comes to pointers
Gets rid of redundant code, such as recalculating the same address
Side effects only occur once

2) Evaluate following program fragment in C:
int a = 0;      
int b = (a++ || ++a) >= (a++ && ++a);
printf( "%d %d", a, b );

Left to right
__
int b = (a++ || ++a) >= (a++ && ++a); | a=0   b=?
(a++ ||... | a= 1 b=?
...|| ++a) | a= 2 b=?
(1 || 2) = 1, since true statement
(a++ && ... | a=3 b=?
&& ++a) | a=4 b=?
(3 && 4) = 1, since true statement
1>=1 is true, thus b=1 | a=4 b=1

right to left
int b = (a++ || ++a) >= (a++ && ++a); | a=0   b=?
&&..++a) | a=1  b= ?
(a++ &&.. | a=2 b =?
(2 && 1) = 1
...|| ++a) | a=3, b=?
(a++ ||... |a =4, b=?
(4 || 3) = 1
(1 >= 1) = 1 |a=4, b=2

3. C++ and Java loops are often written with empty bodies by placing all side effects into the tests, such as in the following two examples:

i = 0;
while (a[i++] != 0);

for (i = 0; a[i] != 0; i++);
 
Are these loops equivalent? Explain.

No, while they may act similarly and should yield the same results, the two loops are not the same. A for loop tests a condition based on what's defined in it starting from
the initialization and will repeat the testing the condition after each increment/decrement until the condition is no longer met while performing what's instructed in the
body of the loop in the process. A while loop has a given boolean condition and will repeat what's in the loop until that boolean condition is no longer met.

Source: https://www.geeksforgeeks.org/difference-between-for-and-while-loop-in-c-c-java/


4)
#define Fun(x) {
int ret_val = x * x + 1 + x * 2 - x;
}

vs.

inline int Fun(x) {
x * x + 1 + x * 2 - x;
}

The inline function would be faster here because it wouldn't need to re-evaluate x for every call to it like the macro will (because the inline function uses applicative evaluation of the argument)

#define Fun 10

vs.

inline int Fun() {
return 10;
}

Since the macro isn't a function, it will run faster than the inline code that will have to execute a function.

5)

2: For a language to be strongly typed, every variable/object needs to have a defined type and the language needs to check to confirm that for it to execute. Also, strongly typed languages don't allow types to do things that they normally
           wouldn't do (ex: Pointer addition and subtraction).
  To be statically typed, a language needs to do type checking at compile time and not run time. Since C allows for things like pointer arithmetic and allows for the programmer to do more than what a strongly typed language allows,
  C is a weakly typed language and not a strongly typed language.

9: Polymorphism is where a function or data type has the same name but has multiple functionalities. Parametric polymorphism is where the functionality doesn't depend on the type of the function/code it's building from whereas
  subtype polymorphism is a type that inherits from another type and completely depends on the original type. Generics are functions/code that are written without a specific typing in mind (meaning it will work with any type).

10: Discrete types are types that are countable and ordered (ex: integers) whereas scalar types are just data types that only have a single value associated with them at a time.

6. Page 342 cyu 27
What is duck typing? What is its connection to polymorphism? In what languages does it appear?

Duck typing is when the type of an object is considered acceptable because it supports the requested method. It is connected to polymorphism since the object in question as
long as its type will work for whatever method is being called at the current time, that type will act as the requested type and the method will work as normal. Languages
that have this include Objective C, Swift, Python, and Ruby.


7. Page 342 cyu 33
Why will C# accept int as a generic argument, but Java won’t?

Java was designed to be backwards compatible. This extends to not only existing versions of the language, but also to existing virtual machines and libraries. Because int
is a primitive type, it can only store binary data of an int which is not flexible with what it's trying to do, and therefore the class Integer was made to solve that
issue. This is not only for just int, but for all primitives types, there is a wrapper class for it in Java. On the other hand, C# was designed with generics having been planned for
from the start and was not constrained despite being built off of another existing language.

Source: https://stackoverflow.com/questions/8660691/what-is-the-difference-between-integer-and-int-in-java


8)
They are all structurally equivalent since they are all char pointers. w and z have strict name equivalence and so do x and y since they have the same names. Since structural equivalence is used in C, they all are equivalent since they are all char pointers.

9) Given the following C++ declaration,
double* dp = new double(3);
void* vp;
int* ip;

which of the following assignments does the compiler complain about?

vp = dp;
Nothing
dp = vp; 
Cannot convert a void pointer to a double pointer
ip = dp; 
Cannot convert from double pointer to int pointer because a double uses floating point format, while int doesn’t 
dp = ip; 
Same reason as before, cannot convert from double pointer to int pointer since double uses floating point format
ip = vp; 
Cannot convert a void pointer to an int pointer because int pointers have to point to ints

ip = (int*) vp;
Nothing
ip = static_cast<int*>(vp);
Nothing
ip = static_cast<int*>(dp); 
can’t perform a type conversion from double to int
ip = reinterpret_cast<int*>(dp);
Nothing

Briefly explain the behavior of the compiler.  Will *ip ever have the value 3 after one of the assignments to ip ?

No, *ip will never have the value of 3. Dp points to a floating point number, trying to cast vp to ip will not result in 3 either since doing a type conversion from vp to ip will not interpret the value ip which points at as a double correctly.

Source: https://stackoverflow.com/questions/573294/when-to-use-reinterpret-cast

10)page 407 exercise 8.16 (Reading C type declarations)

Explain the meaning of the following C declarations:

double *a[n]; 
The pointer "a" is an array of n pointers to doubles
double (*b)[n]; 
The variable "b" is a pointer of type double that points to an array of n doubles
double (*c[n])(); 
"c" is a pointer of type double, it points to an array of n pointers that point to functions that return doubles
double (*d())[n]; 
"d" is a function pointer that returns a pointer to an array of n doubles
